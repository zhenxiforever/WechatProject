<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
<<<<<<< HEAD
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:jms="http://www.springframework.org/schema/jms" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"

	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd    
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd    
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd    
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd    
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd    
        http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-3.1.xsd    
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd    
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd    
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.1.xsd    
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd    
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd    
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd"
	default-autowire="byName">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:/config/jdbc.properties" />
	</bean>
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${jdbc.driverClass}</value>
		</property>
		<property name="jdbcUrl">
			<value>${jdbc.jdbcUrl}</value>
			<!-- <value>jdbc:mysql://localhost:3306/wxyh?characterEncoding=UTF8</value> -->
		</property>
		<property name="user">
			<value>${jdbc.user}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
			<!-- <value>123456</value> -->
		</property>
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize">
			<value>${jdbc.minPoolSize}</value>
		</property>
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize">
			<value>${jdbc.maxPoolSize}</value>
		</property>
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize">
			<value>${jdbc.initialPoolSize}</value>
		</property>
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime">
			<value>${jdbc.maxIdleTime}</value>
		</property>
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement">
			<value>${jdbc.acquireIncrement}</value>
		</property>
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements">
			<value>${jdbc.maxStatements}</value>
		</property>

		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod">
			<value>${jdbc.idleConnectionTestPeriod}</value>
		</property>
		<!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
		<property name="acquireRetryAttempts">
			<value>${jdbc.acquireRetryAttempts}</value>
		</property>
		<!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false -->
		<property name="breakAfterAcquireFailure">
			<value>${jdbc.breakAfterAcquireFailure}</value>
		</property>
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。Default: false -->
		<property name="testConnectionOnCheckout">
			<value>${jdbc.testConnectionOnCheckout}</value>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" />
			<tx:method name="create*" />
			<tx:method name="modify*" />
			<tx:method name="update*" />
			<tx:method name="remove*" />
			<tx:method name="save*" />
			<tx:method name="delete*" />
			<tx:method name="set*" />
			<tx:method name="sort*" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="txPointcut"
			expression="execution(* com.company.weixin.service.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/config/mybatis/${jdbc.dialect}/*Mapper.xml" />
	</bean>

	<!-- 系统用户登陆模块定义 -->
	<bean id="sysUserService" class="com.company.weixin.service.impl.SysUserServiceImpl">
		<property name="sysUserDao" ref="sysUserDao"></property>
	</bean>
	<bean id="sysUserDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.company.weixin.dao.SysUserDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- 系统菜单管理 -->
	<bean id="sysMenuService" class="com.company.weixin.service.impl.SysMenuServiceImpl">
		<property name="sysMenuDao" ref="sysMenuDao"></property>
	</bean>
	<bean id="sysMenuDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.company.weixin.dao.SysMenuDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- 操作日志管理 -->
	<bean id="sysLogService" class="com.company.weixin.service.impl.SysLogServiceImpl">
		<property name="sysLogDao" ref="sysLogDao"></property>
	</bean>
	<bean id="sysLogDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.company.weixin.dao.SysLogDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- 系统参数管理 -->
	<bean id="sysConfService" class="com.company.weixin.service.impl.SysConfServiceImpl">
		<property name="sysConfDao" ref="sysConfDao"></property>
	</bean>
	<bean id="sysConfDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface" value="com.company.weixin.dao.SysConfDao"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
=======
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">


	<context:property-placeholder location="classpath*:config/*.properties" ignore-unresolvable="true"/>
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	      <!-- 基本属性 url、user、password -->
	      <property name="url" value="${jdbc.jdbcUrl}" />
	      <property name="username" value="${jdbc.user}" />
	      <property name="password" value="${jdbc.password}" />
	
	      <!-- 配置初始化大小、最小、最大 -->
	      <property name="initialSize" value="${jdbc.initialPoolSize}" />
	      <property name="minIdle" value="${jdbc.minPoolSize}" /> 
	      <property name="maxActive" value="${jdbc.maxPoolSize}" />
	
	      <!-- 配置获取连接等待超时的时间 -->
	      <property name="maxWait" value="60000" />
	
	      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	      <property name="timeBetweenEvictionRunsMillis" value="60000" />
	
	      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	      <property name="minEvictableIdleTimeMillis" value="300000" />
	
	      <property name="validationQuery" value="SELECT '1'" />
	      <property name="testWhileIdle" value="true" />
	      <property name="testOnBorrow" value="false" />
	      <property name="testOnReturn" value="false" />
	
	      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql false -->
	      <property name="poolPreparedStatements" value="false" />
	      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	
	      <!-- 配置监控统计拦截的filters -->
	      <property name="filters" value="config,stat,log4j,wall" /> 
      	  <property name="connectionProperties" value="config.decrypt=false" />
	  </bean>
	  
	  <!-- 可写的SessionFactory sqlWriteSessionFactory -->
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" scope="singleton">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
	</bean> -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/config/mybatis/${jdbc.dialect}/*Mapper.xml"/>  
	</bean>
	
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<context:component-scan base-package="com.bilibala.manage.service,com.bilibala.manage.action" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>
	

>>>>>>> origin/master
</beans>